# Azure DevOps Pipeline: Remove Role Assignment with Lock Management

parameters:
  - name: targetEnvironment
    displayName: Target Environment
    type: string
    default: development
    values:
      - development
      - test
      - acceptance
      - production

  - name: ObjectId
    displayName: Object ID to remove access (Format: xxxx-xxx-xxx-xxx-xxx)
    type: string

  - name: Scope
    displayName: Scope to have the access removed (Format: /subscriptions/xxx-xxx-xxx-xxx-xxx/resourceGroups/xxx)
    type: string

  - name: RoleDefinitionName
    displayName: Name of the Role to be removed (Reader, Contributor, etc)
    type: string

variables:
  - group: Abnamro.Coesd.VariableGroup.GlobalVars
  - template: ../parameter/global.variables.yml
  - template: ../parameter/${{parameters.targetEnvironment}}.variables.yml

trigger: none
pr: none

stages:
  - stage: RemoveRBACStage
    displayName: Remove RBAC Role
    jobs:
      - job: RemoveRBAC
        displayName: Manage Locks and Remove RBAC
        steps:
          - task: AzureCLI@2
            name: ManageLocks
            displayName: "üîí Manage Locks and Remove"
            inputs:
              azureSubscription: '${{ variables.ResourceGroupName }}'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                SCOPE="${{ parameters.Scope }}"
                SUBSCRIPTION_ID=$(echo "$SCOPE" | cut -d'/' -f3)
                RESOURCE_GROUP=$(echo "$SCOPE" | awk -F'/' '{for (i=1; i<=NF; i++) if ($i=="resourceGroups") print $(i+1)}')
                RESOURCE_TYPE=$(echo "$SCOPE" | awk -F'/' '{for (i=1; i<=NF; i++) if ($i=="providers") print $(i+2)}')
                RESOURCE_NAME=$(echo "$SCOPE" | awk -F'/' '{print $NF}')
                NAMESPACE=$(echo "$SCOPE" | awk -F'/' '{for (i=1; i<=NF; i++) if ($i=="providers") print $(i+1)}')

                echo "Scope: $SCOPE"
                echo "Subscription ID: $SUBSCRIPTION_ID"
                echo "RG: $RESOURCE_GROUP"
                echo "Type: $RESOURCE_TYPE"
                echo "Name: $RESOURCE_NAME"
                echo "Namespace: $NAMESPACE"

                az account set --subscription "$SUBSCRIPTION_ID"

                LOCKS=$(az lock list \
                  --resource-group "$RESOURCE_GROUP" \
                  --namespace "$NAMESPACE" \
                  --resource-type "$RESOURCE_TYPE" \
                  --resource-name "$RESOURCE_NAME" \
                  -o json)

                echo "$LOCKS" > $(Pipeline.Workspace)/out/locks.json
                echo "üîí Locks JSON written to out/locks.json"

                for row in $(echo "$LOCKS" | jq -r '.[] | @base64'); do
                  _jq() {
                    echo ${row} | base64 --decode | jq -r ${1}
                  }

                  LOCK_ID=$(_jq '.id')
                  LOCK_NAME=$(_jq '.name')

                  echo "Removing lock: $LOCK_NAME at $LOCK_ID"
                  az lock delete --ids "$LOCK_ID"
                  echo "Lock '$LOCK_NAME' removed."
                done

          - task: PublishBuildArtifacts@1
            displayName: 'üì§ Publish Locks Artifact'
            inputs:
              pathToPublish: '$(Pipeline.Workspace)/out'
              artifactName: 'locks'

          - task: AzurePowerShell@5
            name: RemoveRBACRole
            displayName: "üóëÔ∏è Remove RBAC Role"
            inputs:
              azurePowerShellVersion: LatestVersion
              azureSubscription: '${{ variables.ResourceGroupName }}'
              ScriptType: InlineScript
              Inline: |
                $ErrorActionPreference = "Stop"
                $ObjectId = "${{ parameters.ObjectId }}"
                $Scope = "${{ parameters.Scope }}"
                $RoleDefinitionName = "${{ parameters.RoleDefinitionName }}"

                $roleAssignments = Get-AzRoleAssignment -ObjectId $ObjectId -Scope $Scope -ErrorAction Stop | Where-Object {
                  $_.RoleDefinitionName -eq $RoleDefinitionName
                }

                if (-not $roleAssignments) {
                  Write-Output "No matching role assignments found."
                } else {
                  foreach ($assignment in $roleAssignments) {
                    Write-Output "Removing: $($assignment.RoleDefinitionName) at $($assignment.Scope)"
                    Remove-AzRoleAssignment -ObjectId $assignment.ObjectId -Scope $assignment.Scope -RoleDefinitionName $assignment.RoleDefinitionName -Verbose
                  }
                }

      - job: RestoreLocks
        displayName: Restore Locks
        dependsOn: RemoveRBAC
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'üì• Download Locks Artifact'
            inputs:
              artifactName: 'locks'
              targetPath: '$(Pipeline.Workspace)/out'

          - task: AzureCLI@2
            displayName: 'üîÅ Restore Locks'
            inputs:
              azureSubscription: '${{ variables.ResourceGroupName }}'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                LOCK_FILE="$(Pipeline.Workspace)/out/locks.json"

                if [ ! -f "$LOCK_FILE" ]; then
                  echo "‚ùå Lock file not found: $LOCK_FILE"
                  exit 1
                fi

                LOCKS=$(cat "$LOCK_FILE")
                COUNT=$(echo "$LOCKS" | jq length)
                echo "üîÅ Restoring $COUNT locks..."

                for row in $(echo "$LOCKS" | jq -r '.[] | @base64'); do
                  _jq() {
                    echo ${row} | base64 --decode | jq -r ${1}
                  }

                  LOCK_ID=$(_jq '.id')
                  LOCK_NAME=$(_jq '.name')
                  LOCK_LEVEL=$(_jq '.level')

                  echo "Restoring lock: $LOCK_NAME"
                  az lock create --name "$LOCK_NAME" --lock-type "$LOCK_LEVEL" --ids "$LOCK_ID"
                  echo "‚úÖ Lock '$LOCK_NAME' restored."
                done
